Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(!head || !head->next) return NULL;
        
        ListNode* p1= head;
        ListNode* p2= head->next;
        bool hasLoop = false;
        while(1){
            if(!p2->next || !p2->next->next){
                break;
            }
            
            if(p2==p1){
                hasLoop = true;
                break;
            }
            
            p2 = p2->next->next;
            p1 = p1->next;
        }
        
        if(!hasLoop) return NULL;
        p1 = head;
        p2=p2->next;
        while(p1 != p2){
            p2 = p2->next;
            p1 = p1->next;
        }
        
        return p1;
    }
};