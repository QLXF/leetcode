{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 class Solution \{\
public:\
    vector<string> generateParenthesis(int n) \{\
        vector<string> v;\
        if(n==0) return v;\
        if(n==1) \{\
            v.push_back("()");\
            return v;\
        \}\
        \
        set<string> s;\
        vector<string> v1 = generateParenthesis(n-1);\
        for(int i=0; i<v1.size(); i++)\{\
            s.insert("()" + v1[i]);\
            for(int j=1; j<v1[i].length(); j=j+2)\{\
                if(v1[i][j] == ')')\{\
                    string s1 = '('+v1[i].substr(0,j+1)+')'+v1[i].substr(j+1);\
                    s.insert(s1);\
                    s1 = v1[i].substr(0, j+1) + '('+ v1[i].substr(j+1)+')';\
                    s.insert(s1);\
                \}\
            \}\
            s.insert(v1[i]+"()");\
        \}\
        for(set<string>::iterator it= s.begin(); it!=s.end(); it++)\{\
            v.push_back(*it);\
        \}\
        return v;\
    \}\
\};\
//solution 2\
class Solution \{\
public:\
    vector<string> generateParenthesis(int n) \{\
        vector<string> v;\
        if(n==0) return v;\
        if(n==1) \{\
            v.push_back("()");\
            return v;\
        \}\
        \
        set<string> s;\
        \
        for(int i=1; i<=n/2; i++)\{\
            vector<string> v1 = generateParenthesis(i);\
            vector<string> v2 = generateParenthesis(n-i);\
            for(int j=0; j<v1.size();j++)\{\
                for(int k=0; k<v2.size(); k++)\{\
                    s.insert(v1[j]+v2[k]);\
                    s.insert(v2[k]+v1[j]);\
                \}\
            \}\
            if(i==1)\{\
                for(int k=0; k<v2.size(); k++)\{\
                    s.insert("("+v2[k] + ")");\
                \}\
            \}\
        \}\
        \
        for(set<string>::iterator it= s.begin(); it!=s.end(); it++)\{\
            v.push_back(*it);\
        \}\
        return v;\
    \}\
\};}