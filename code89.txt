Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.
Example 1: Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].
Example 2: Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].
This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        int size = intervals.size();
        if(size == 0){
            intervals.push_back(newInterval);
            return intervals;
        }
        
        for(vector<Interval>::iterator it = intervals.begin(); it!=intervals.end();){
            Interval i1 = *it;
            if(overlap(i1, newInterval)){
                intervals.erase(it);
                newInterval.start = newInterval.start < i1.start ? newInterval.start :i1.start;
                newInterval.end = newInterval.end > i1.end ? newInterval.end : i1.end;
            }
            else{
                it++;
            }
        }
        
        if(intervals.size() == 0 || intervals[intervals.size()-1].end < newInterval.start){
            intervals.push_back(newInterval);
        }
        else{
            for(int i=0; i<intervals.size(); i++){
                if(intervals[i].start > newInterval.end){
                    intervals.insert(intervals.begin()+i, newInterval);
                    break;
                }
            }
        }
        return intervals;
    }
    

    bool overlap(Interval i1, Interval i2){
        return !((i1.end < i2.start) || (i2.end <i1.start));
    }
};