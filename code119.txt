Given a linked list, swap every two adjacent nodes and return its head.
For example,â€¨Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        if(!head || !head->next) return head;
        ListNode *f1=head;
        ListNode *f2=NULL;
        ListNode *f3=NULL;
        ListNode *f4=NULL;
        
        f2=f1;
        f1=f1->next;
        f4=f1->next;
        head = f1;
        f1->next = f2;
        f2->next = f4;
        while(f4 && f4->next){
            f3 = f2;
            f1 = f4->next;
            f2 = f4;
            f4 = f1->next;
            
            f3->next = f1;
            f1->next = f2;
            f2->next =f4;
        }
        return head;
    }
};

class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        if(!head || !head->next) return head;

        ListNode *l1 = head->next;
        ListNode *l2 =swapPairs(l1->next);
        ListNode *l3 = head;
        head = l1;
        l1->next = l3;
        l3->next = l2;
        return head;
    }
};