Given a digit string, return all possible letter combinations that the number could represent.
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.length() == 0) return vector<string>(1,"");
        map<char, string> mp;
        mp.insert(make_pair('2', "abc"));
        mp.insert(make_pair('3', "def"));
        mp.insert(make_pair('4', "ghi"));
        mp.insert(make_pair('5', "jkl"));
        mp.insert(make_pair('6', "mno"));
        mp.insert(make_pair('7', "pqrs"));
        mp.insert(make_pair('8', "tuv"));
        mp.insert(make_pair('9', "wxyz"));
        return letterHelper(digits, 0, mp);
    }
    
    vector<string> letterHelper(string digits, int start, map<char, string> &mp){
        vector<string> v;
        if(start == digits.length()-1){
            if(digits[start] >='2' && digits[start] <='9'){
                string s1= mp[digits[start]];
                for(int i=0; i<s1.length(); i++){
                    v.push_back(s1.substr(i,1));
                }
            }
            return v;
        }
        
        vector<string> v2 = letterHelper(digits, start+1, mp);
        if(digits[start] >='2' && digits[start] <='9'){
            string s1= mp[digits[start]];
            for(int i=0; i<s1.length(); i++){
                for(int j=0; j<v2.size(); j++){
                    v.push_back(s1.substr(i,1)+v2[j]);
                }
            }
        }
        else{
            v.insert(v.end(), v2.begin(), v2.end());
        }
        return v;
    }
};