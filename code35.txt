Given a string S and a string T, count the number of distinct subsequences of T in S.
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
Here is an example:â€¨S = "rabbbit", T = "rabbit"
Return 3.
class Solution {
public:
    int numDistinct(string s, string t) {
        int lens = (int)s.length();
        int lent = (int)t.length();
        if(lens < lent) return 0;
        if(s.compare(t) == 0) return 1;
        
        vector<vector<int> > v(lens+1, vector<int>(lent, 0));
        for(int i=1; i<=lens; i++){
            v[i][0] = v[i-1][0] + ((s[i-1] == t[0]) ?1:0);
        }
        for(int i=1; i<lent; i++){
            for(int j=2; j<=lens;j++){
                if(s[j-1] == t[i]){
                    v[j][i] = v[j-1][i]+v[j-1][i-1];
                }
                else{
                    v[j][i] = v[j-1][i];
                }
            }
        }
        return v[lens][lent-1];
    }
};