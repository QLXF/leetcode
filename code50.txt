Given a binary tree, determine if it is a valid binary search tree (BST).
Assume a BST is defined as follows:
	•	The left subtree of a node contains only nodes with keys less than the node's key.
	•	The right subtree of a node contains only nodes with keys greater than the node's key.
	•	Both the left and right subtrees must also be binary search trees.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode *root) {
        if(!root) return true;
        if(!root->left && !root->right) return true;
        
        if(root->left){
            int v = maxHelper(root->left);
            if(v >= root->val) return false;
        }
        
        if(root->right){
            int v = minHelper(root->right);
            if(v <= root->val) return false;
        }
        
        if(!isValidBST(root->left)) return false;
        if(!isValidBST(root->right)) return false;
        return true;
    }
    
    int minHelper(TreeNode* root){
        if(!root->left && !root->right){
            return root->val;
        }
        
        int min = root->val;
        if(root->left){
            int tmp = minHelper(root->left);
            min = min < tmp ? min:tmp;
        }
        
        if(root->right){
            int tmp = minHelper(root->right);
            min = min < tmp ? min:tmp;
        }
        return min;
    }
    
    int maxHelper(TreeNode* root){
        if(!root->left && !root->right){
            return root->val;
        }
        
        int max = root->val;
        if(root->left){
            int tmp = maxHelper(root->left);
            max = max > tmp ? max:tmp;
        }
        
        if(root->right){
            int tmp = maxHelper(root->right);
            max = max > tmp ? max:tmp;
        }
        return max;       
    }
};