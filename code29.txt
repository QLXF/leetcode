Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int size = (int)prices.size();
        if(size<=1) return 0;
        
        int one =0;
        int flag = prices[0];
        vector<int> v;
        v.push_back(0);
        for(int i=1; i<size; i++){
            if(prices[i] <= flag){
                flag = prices[i];
                v.push_back(one);
                continue;
            }
            one =  one > (prices[i] -flag) ? one : (prices[i] - flag);
            v.push_back(one);
        }
        
        flag = prices[size-1];
        vector<int> v1(size, 0);
        for(int i=size-2;i>=0; i--){
            if(prices[i] < prices[i+1]){
                v1[i] = (prices[i+1]-prices[i] + v1[i+1]);
            }
            else {
                int tmp = v1[i+1] + prices[i+1]-prices[i];
                v1[i] = (tmp > 0 ? tmp : 0);
            }
        }
        
        int result = 0;
        for(int i=0;i<size-1; i++){
            result = result > (v[i] + v1[i+1]) ? result : (v[i] + v1[i+1]);
        }
        return result > one? result : one;
    }
};