Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
For example,â€¨If n = 4 and k = 2, a solution is:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

class Solution {
public:
    vector<vector<int> > combine(int n, int k) {
        vector<vector<int> > v;
        if(n==0 || k==0 ) return v;
    
        v = helper(1,n,k);
        return v;
    }
    
    vector<vector<int> > helper(int begin, int end, int k){
        vector<vector<int> > v;
        if(end-begin +1 == k){
            v.push_back(getVector(begin, end));
            return v;
        }
        if(k==1){
            for(int i=begin; i<=end; i++){
                vector<int> v1(1, i);
                v.push_back(v1);
            }
            return v;
        }
        
        for(int i=begin; i<=end-k+1; i++){
            vector<vector<int> > v1= helper(i+1, end, k-1);
            for(int j=0; j<v1.size(); j++){
                v1[j].insert(v1[j].begin(),i);
                v.push_back(v1[j]);
            }
        }
        return v;
    }
    
    vector<int> getVector(int begin, int end){
        vector<int> v;
        for(int i=begin; i<=end; i++){
            v.push_back(i);
        }
        return v;
    }
};