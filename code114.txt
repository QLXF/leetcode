Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note:
	•	Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
	•	The solution set must not contain duplicate quadruplets.

    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

class Solution {
public:
    vector<vector<int> > fourSum(vector<int> &num, int target) {
        int size = num.size();
        vector<vector<int> > vv;
        if(size<=3) return vv;
        
        sort(num.begin(), num.end());
        for(int i=0; i<size-3; i++){
            if(i>0 && num[i] == num[i-1]){
                continue;
            }
            for(int j=i+1; j<size-2; j++){
                if(j>i+1 && num[j] == num[j-1]){
                    continue;
                }
                int k=j+1;
                int l=size-1;
                while(k<l){
                    if(k>j+1 && num[k]==num[k-1]){
                        k++;
                        continue;
                    }
                    if(l<size-1 && num[l] == num[l+1]){
                        l--;
                        continue;
                    }
                    int tmp = num[i]+num[j]+num[k]+num[l];
                    if(tmp == target){
                        vector<int> v1(1, num[i]);
                        v1.push_back(num[j]);
                        v1.push_back(num[k]);
                        v1.push_back(num[l]);
                        vv.push_back(v1);
                        k++; l--;
                    }
                    else if(tmp > target){
                        l--;
                    }
                    else {
                        k++;
                    }
                }
            }
            
        }
        return vv;
    }
};