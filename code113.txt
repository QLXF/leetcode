Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

class Solution {
public:
    int threeSumClosest(vector<int> &num, int target) {
        int size = num.size();
        if(size<=3){
            return num[0]+num[1]+num[2];
        }
        
        sort(num.begin(), num.end());
        int diff = INT_MAX;
        int result = target;
        for(int i=0; i<size-2; i++){
            if(i>0 && num[i] == num[i-1]){
                continue;
            }
            int j=i+1;
            int k=size-1;
            while(j<k){
                if(j>i+1 && num[j] == num[j-1]){
                    j++;
                    continue;
                }
                if(k<size-1 && num[k] == num[k+1]){
                    k--;
                    continue;
                }
                int tmp =num[i]+num[j] +num[k];
                if( tmp == target){
                    return target;
                }
                else if(tmp > target){
                    if(abs(tmp-target) <diff){
                        diff= abs(tmp-target);
                        result = tmp;
                    }
                    k--;
                }
                else{
                   if(abs(tmp-target) <diff){
                        diff= abs(tmp-target);
                        result = tmp;
                    }
                    j++; 
                }
            }
        }
        return result;
    }
};