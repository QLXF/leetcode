Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.
Below is one possible representation of s1 = "great":
    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.
For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".
    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".
Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".
    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".
Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

class Solution {
public:
    bool isScramble(string s1, string s2) {
        int len1=(int)s1.length();
        int len2=(int)s2.length();
        if(len1 != len2) return false;
        if(s1.compare(s2) == 0) return true;
        if(len1 == 1){
            return s1[0] == s2[0];
        }
        if(len1==2){
            return ((s1[0] == s2[0] && s1[1] == s2[1])
                    || (s1[0] == s2[1] && s1[1] == s2[0]));
        }
        if(!helper(s1, s2)) return false;
        for(int i=0; i<len1-1; i++){
            string s11 = s1.substr(0, i+1);
            string s12 = s1.substr(i+1);
            string s21 = s2.substr(0, i+1);
            string s22 = s2.substr(i+1);
            string s23 = s2.substr(0,len1-1-i);
            string s24 = s2.substr(len1-1-i);
            if(isScramble(s11,s21) && isScramble(s12, s22)) return true;
            if(isScramble(s11,s24) && isScramble(s12, s23)) return true;
        }
        return false;
    }
    
    bool helper(string s1, string s2){
        map<char, int> mp;
        for(int i=0; i<s1.length(); i++){
            mp[s1[i]] += 1;
        }
        
        for(int i=0; i<s2.length(); i++){
            mp[s2[i]] -=1;
            if(mp[s2[i]] == 0){
                mp.erase(s2[i]);
            }
        }
        return mp.size() ==  0 ? true: false;
    }
};