Given a binary tree, return the inorder traversal of its nodes' values.
For example:â€¨Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3

return [1,3,2].

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        vector<int> v;
        if(!root){
            return v;
        }
        if(!root->left && !root->right){
            v.push_back(root->val);
            return v;
        }
        
        vector<TreeNode*> vn;
        set<TreeNode*> s;
        set<TreeNode*> s1;
        vn.push_back(root);
        s.insert(root);
        while(vn.size()>0){
            TreeNode *t = vn.back();
            if(t->left && s.find(t->left) == s.end()){
                vn.push_back(t->left);
                s.insert(t->left);
            }
            else{
                if(s1.find(t) == s1.end()){
                  v.push_back(t->val);
                  s1.insert(t);
                }
                
                if(t->right && s.find(t->right) == s.end()){
                    vn.push_back(t->right);
                    s.insert(t->right);
                }
                else{
                    vn.pop_back();
                }
            }
        }
        return v;
    }
};