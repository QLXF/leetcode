Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)
You have the following 3 operations permitted on a word:
a) Insert a character b) Delete a character c) Replace a character

class Solution {
public:
    int minDistance(string word1, string word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        if(len1 == 0 && len2 == 0){
            return 0;   
        }
        else if(len1 == 0){
            return len2;
        }
        else if(len2 == 0){
            return len1;
        }
        
        vector<vector<int> > v(len1, vector<int>(len2, 0));
        if(word2[0] != word1[0]){
            v[0][0] = 1;
        }
        
        for(int i=1; i<len1;i++){
            if(word2[0] == word1[i]){
                v[i][0] = min2(v[i-1][0]+1, i);
            }
            else{
                v[i][0] = v[i-1][0]+1;
            }
        }
        
        for(int i=1; i<len2;i++){
            if(word1[0] == word2[i]){
                v[0][i] = min2(v[0][i-1]+1, i);
            }
            else{
                v[0][i] = v[0][i-1]+1;
            }
        }
        
        for(int i=1; i<len1;i++){
            for(int j=1; j<len2;j++){
                if(word1[i] == word2[j]){
                    v[i][j] = min(v[i-1][j-1], v[i][j-1]+1, v[i-1][j]+1);
                }
                else{
                    v[i][j] = min(v[i-1][j-1]+1, v[i][j-1]+1, v[i-1][j]+1);
                }
            }
        }
        return v[len1-1][len2-1];
    }
    int min2(int i, int j){
        return i<j ? i:j;
    }
    int min(int i, int j, int z){
        int tmp = (i < j ? i:j);
        return tmp < z ? tmp:z;
    }
};