{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 LucidaGrande;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red184\green14\blue61;
\red247\green238\blue241;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa200

\f0\fs28 \cf2 \cb3 Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\
The replacement must be in-place, do not allocate extra memory.\
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\uc0\u8232 
\f1\fs26 \cf4 \cb5 1,2,3
\f0\fs28 \cf2 \cb3  
\f2 \uc0\u8594 
\f0  
\f1\fs26 \cf4 \cb5 1,3,2
\f0\fs28 \cf2 \cb3 \uc0\u8232 
\f1\fs26 \cf4 \cb5 3,2,1
\f0\fs28 \cf2 \cb3  
\f2 \uc0\u8594 
\f0  
\f1\fs26 \cf4 \cb5 1,2,3
\f0\fs28 \cf2 \cb3 \uc0\u8232 
\f1\fs26 \cf4 \cb5 1,1,5
\f0\fs28 \cf2 \cb3  
\f2 \uc0\u8594 
\f0  
\f1\fs26 \cf4 \cb5 1,5,1
\f0\fs28 \cf2 \cb3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f3\fs24 \cf0 \cb1 \
class Solution \{\
public:\
void nextPermutation(vector<int> &num) \{\
    int size = (int)num.size();\
    if(size <=1) return;\
    \
    int f1=size-1;\
    while(f1>=1  && num[f1]<=num[f1-1])\{\
        f1--;\
    \}\
    int f2 = f1;\
    int f3 = size-1;\
    while(f2<f3)\{\
        helperPerm(num, f2, f3);\
        f2++; f3--;\
    \}\
    if(f1==0) return;\
    if(f1==size-1)\{\
        helperPerm(num, size-2, size-1);\
        return;\
    \}\
    else\{\
        int f4 = f1;\
        while(num[f4] <= num[f1-1])\{\
            f4++;\
        \}\
        helperPerm(num, f1-1, f4);\
    \}\
       \
\}\
\
void helperPerm(vector<int> &num, int i1, int i2)\{\
    int tmp=num[i1];\
    num[i1]=num[i2];\
    num[i2]=tmp;\
\}\
\};}