/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *sortList(ListNode *head) {
        if(head == NULL  || head->next == NULL) return head;
        
        ListNode* p = head;
        int len=1;
        while(p->next != NULL){
            p = p->next;
            len++;
        }
        ListNode* h = sortList1(head, p, len);
        return h;
    }
    
    ListNode* sortList1(ListNode* start, ListNode* end, int len){
        if(len == 1){
            start->next = NULL;
            return start;
        }
        if(len == 2){
            if(start->val > end->val){
                int tmp = start->val;
                start->val = end->val;
                end->val = tmp;
            }
            end->next = NULL;
            return start;
        }
        
        ListNode* p1 = start;
        ListNode* p2 = NULL;
        int middle = 1;
        while(middle < len/2){
            p1 = p1->next;
            middle++;
        }
        p2 = p1->next;
        
        ListNode* h1= sortList1(start, p1, len/2);
        ListNode* h2= sortList1(p2, end, (len+1)/2);
        
        ListNode* h3 = new ListNode(0);
        ListNode* h4 = h3;
        while(h1 != NULL && h2 != NULL){
            if(h1->val > h2->val){
                connectNodes(&h4, &h2);
            }
            else if(h1->val == h2->val){
                connectNodes(&h4, &h1);
                connectNodes(&h4, &h2);
            }
            else{
                connectNodes(&h4, &h1);
            }
        }
        
        while(h1 != NULL){
           connectNodes(&h4, &h1);
        }
        
        while(h2 != NULL){
           connectNodes(&h4, &h2);
        }
        return h3->next;
    }
    
    void connectNodes(ListNode** ln1, ListNode** ln2){
        ListNode* ln2next = (*ln2)->next;
        (*ln1)->next = (*ln2);
        (*ln1) = (*ln1)->next;
        (*ln1)->next = NULL;
        (*ln2) = ln2next;
    }
};