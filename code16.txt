Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.

OJ's undirected graph serialization:
Nodes are labeled uniquely.
We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.

As an example, consider the serialized graph {0,1,2#1,2#2,2}.
The graph has a total of three nodes, and therefore contains three parts as separated by #.
	1.	First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
	2.	Second node is labeled as 1. Connect node 1 to node 2.
	3.	Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.

/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(!node) return NULL;
        
        map<UndirectedGraphNode*, UndirectedGraphNode*> mu;
        vector<UndirectedGraphNode*> v;
        v.push_back(node);
        while(v.size()>0){
            UndirectedGraphNode* n = v.front();
            UndirectedGraphNode* nn;
            if(mu.find(n) == mu.end()){
                nn = new UndirectedGraphNode(n->label);
                mu.insert(make_pair(n, nn));
            }
            else {
                nn = mu[n];
            }
            
            for(int i=0; i<n->neighbors.size(); i++){
                UndirectedGraphNode* nei = n->neighbors[i];
                UndirectedGraphNode* nnei;
                if(mu.find(nei) == mu.end()){
                    v.push_back(nei);
                    nnei = new UndirectedGraphNode(nei->label);
                    mu.insert(make_pair(nei, nnei));
                }
                else{
                    nnei = mu[nei];
                }
                nn->neighbors.push_back(nnei);
            }
            v.erase(v.begin());
        }
        return mu[node];
    }
};