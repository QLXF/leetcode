Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

	•	Integers in each row are sorted from left to right.
	•	The first integer of each row is greater than the last integer of the previous row.

For example,
Consider the following matrix:
[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        int m=matrix.size();
        if(m==0) return false;
        int n=matrix[0].size();
        if(n==0) return false;
        
        int f1=0;
        int f2=m-1;

        while(f1<f2){
            int mid = f1+(f2-f1)/2;
            if(matrix[mid][n-1] == target){
                return true; 
            }
            else if(matrix[mid][n-1] > target){
                f2 = mid-1;
            }
            else{
                f1 = mid+1;
            }
        }
        if(matrix[f1][n-1] < target){
            if(f1==m-1) return false;
            f1++;
        }
        int f3=0;
        int f4=n-1;
        while(f3<f4){
            int mid = f3+(f4-f3)/2;
            if(matrix[f1][mid] == target){
                return true; 
            }
            else if(matrix[f1][mid] > target){
                f4 = mid-1;
            }
            else{
                f3 = mid+1;
            }           
        }
        return matrix[f1][f3] == target;
    }
};