Given a string containing only digits, restore it by returning all possible valid IP address combinations.
For example:â€¨Given "25525511135",
return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)
class Solution {
public:
vector<string> restoreIpAddresses(string s) {
    return helper(s, 0, (int)s.length()-1, 1);
}

vector<string> helper(string& s, int start, int end, int level){
    vector<string> v;
    int len = end-start+1;
    if(len > 3*(5-level) || len < 5-level){
        return v;
    }
    if(level == 4){
        if(isGood(s,start, end)){
            v.push_back(s.substr(start,len));
        }
        return v;
    }
    for(int i=0; i<3 && i<=end-start; i++){
            if(isGood(s, start, start+i)){
                vector<string> v1 = helper(s, start+i+1, end, level+1);
                for(int j=0;j<v1.size(); j++){
                    v.push_back(s.substr(start, i+1)+"."+v1[j]);
                }
            }
    }
    return v;
}

bool isGood(string& s, int start, int end ){
    int len = end-start+1;
    if(len<0){
        return false;
    }
    if(s[start] == '0'){
        return len == 1? true : false;
    }
    int tmp = atoi(s.substr(start, len).c_str());
    return tmp>=0 && tmp <=255;
}

};