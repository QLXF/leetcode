Given a list, rotate the list to the right by k places, where k is non-negative.
For example: Given 1->2->3->4->5->NULL and k = 2, return 4->5->1->2->3->NULL.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *rotateRight(ListNode *head, int k) {
        if(!head || !head->next || k==0) return head;
        
        ListNode *p1=head;
        int k1 = k;
        int len =1;
        while(p1->next && k1>0){
            k1--;
            len++;
            p1 = p1->next;
        }
        if(k1>0){
            k1 = k%len;
            p1=head;
            while(p1->next && k1>0){
                k1--;
                p1 = p1->next;
            }
        }
        
        ListNode *p2 = head;
        while(p1->next){
            p1 = p1->next;
            p2 = p2->next;
        }
        p1->next = head;
        head = p2->next;
        p2->next = NULL;
        return head;
    }
};