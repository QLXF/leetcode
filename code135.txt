Find the contiguous subarray within an array (containing at least one number) which has the largest product.
For example, given the array [2,3,-2,4],â€¨the contiguous subarray [2,3] has the largest product = 6.

class Solution {
public:
int maxProduct(int A[], int n) {
    if(n==0) return 0;
    if(n==1) return A[0];
    
    int tmp = 1;
    int neg = 0;
    int result = INT_MIN;
    int firstneg = -1;
    for(int i=0; i<n; i++){
        if(A[i] == 0){
            tmp = 1;
            neg = 0;
            firstneg = -1;
            result = result > 0?result :0;
        }
        else{
            neg = neg + (A[i] < 0 ? 1:0);
            tmp *= A[i];
            if(neg==1 && A[i] < 0){
                firstneg = tmp;
            }
            if(neg%2==0){
                result = result > tmp ? result :tmp;
            }
            else{
                int tmp1 = (A[i]<0&&neg==1)? tmp : tmp/firstneg;
                result = result > tmp1 ? result : tmp1;
            }
            
        }
    }
    return result;
}
};

//solution 2
class Solution {
public:
    int maxProduct(int A[], int n) {
        if(n==0) return 0;
        if(n==1) return A[0];
        
        int min=A[0];
        int max=A[0];
        int result = max;
        for(int i=1; i<n; i++){
            if(A[i]==0){
                min = 0;
                max = 0;
                result = result > 0 ? result : 0;
            }
            else{
                int tmp1 = min*A[i];
                int tmp2 = max*A[i];
                max = tmp1 > tmp2 ? tmp1 : tmp2;
                min = tmp1 < tmp2 ? tmp1 : tmp2;
                min = min < A[i] ? min : A[i];
                max = max > A[i] ? max : A[i];
                result  = result > max ? result :max;
            }
        }
        return result;
    }
};