Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) {
        int m = board.size();
        if(m==0) return false;
        int n = board[0].size();
        if(n==0) return false;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n; j++){
                set<pair<int,int> > st;
                if(helper(board, i,j,word,0,st)){
                    return true;
                }
            }
        }
        return false;
    }
    
    bool helper(vector<vector<char> > &board, int i, int j, string word, int start, set<pair<int, int> > &st){
        if(start == word.length()-1){
            return st.find(make_pair(i,j)) == st.end() && board[i][j] == word[start];
        }
        
        if(board[i][j] == word[start]){
            st.insert(make_pair(i,j));
            
            if(helper1(board, i+1, j) && st.find(make_pair(i+1, j)) == st.end() 
            && helper(board, i+1, j, word, start+1, st))
            {
                return true;
            } 
            if(helper1(board, i-1, j) && st.find(make_pair(i-1, j)) == st.end() 
            && helper(board, i-1, j, word, start+1, st)){
                return true;
            } 
            if(helper1(board, i, j-1) && st.find(make_pair(i, j-1)) == st.end() 
            && helper(board, i, j-1, word, start+1, st)){
                return true;
            }
            if(helper1(board, i, j+1) && st.find(make_pair(i, j+1)) == st.end() 
            && helper(board, i, j+1, word, start+1, st)){
                return true;
            }
            st.erase(make_pair(i,j));
        }
        return false;
    }
    
    bool helper1(vector<vector<char> > &board, int i, int j){
        return i>=0 && i<board.size() && j>=0 && j<board[0].size();
    }
};