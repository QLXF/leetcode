Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.
For "(()", the longest valid parentheses substring is "()", which has length = 2.
Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

class Solution {
public:
    int longestValidParentheses(string s) {
        int len=s.length();
        if(len<=1) return 0;
        
        vector<pair<int,char> > v;

        int result = 0;
        int last = -1;
        for(int i=0; i<len; i++){
            if(s[i] == ')'){
                if(v.size() == 1 && v.back().second == '('){
                    int count = i-last;
                    result = result > count ? result : count;
                    v.pop_back();
                }
                else if(v.size() > 1  && v.back().second == '('){
                    v.pop_back();
                    int count = i-v.back().first;
                    result = result > count ? result : count;
                }
                else{
                    last = i;
                }
            }
            else{
                v.push_back(make_pair(i,s[i]));
            }

        }
        return result;
    }
};