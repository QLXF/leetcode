Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note:
	•	Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
	•	The solution set must not contain duplicate triplets.

    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)

class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) {
        int size = (int)num.size();
        vector<vector<int> > vv;
        if(size <=2) return vv;
        sort(num.begin(), num.end());
        for(int i=0; i<size-2; i++){
            if(i>0 && num[i] == num[i-1]){
                continue;
            }
            if(num[i] > 0){
                break;
            }
            int j=i+1;
            int k=size-1;
            while(j<k){
                if(j>i+1 && num[j] == num[j-1]){
                    j++;
                    continue;
                }
                if(k<size-1 && num[k] == num[k+1]){
                        k--;
                        continue;
                }
                if(num[j]+num[k]+num[i] == 0){
                    vector<int> v1;
                    v1.push_back(num[i]);
                    v1.push_back(num[j]);
                    v1.push_back(num[k]);
                    vv.push_back(v1);
                    j++;k--;
                }
                else if(num[j]+num[k]+num[i] > 0){
                    k--;
                }
                else {
                    j++;
                }
            }
        }
        return vv;
    }
};