Given an absolute path for a file (Unix-style), simplify it.
For example, path = "/home/", => "/home" path = "/a/./b/../../c/", => "/c"
click to show corner cases.
Corner Cases:

	•	Did you consider the case where path = "/../"? In this case, you should return "/".
	•	Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/". In this case, you should ignore redundant slashes and return "/home/foo".

class Solution {
public:
    string simplifyPath(string path) {
        int len = (int)path.length();
        if(len<=1) return path;
        
        vector<char> s;
        int i=0;
        int dot = 0;
        while(i<len){
            if(path[i] == '/'){
                
                if(i > 0 && path[i-1] == '/'){
                    s.pop_back();
                }
                
                if(i>1 && dot<=2 && dot>0){
                    if(dot==2){
                        s.pop_back();
                        s.pop_back();
                        if(s.size()>1 && s.back() == '/'){
                            s.pop_back();
                            while(s.size()>0 && s.back() !='/'){
                                s.pop_back();
                            }
                        }
                    }
                    else if(dot==1){
                        s.pop_back();
                    }
                    dot =0;
                    i++;
                    continue;
                }
            }
            if(path[i] == '.'){
                dot ++;
            }
            else{
                dot = 0;
            }
            s.push_back(path[i]);
            i++;
        }
        
        if(s.back() == '.' && dot<=2){
            if(dot ==2){
                s.pop_back();
                s.pop_back();
                if(s.size()>1 && s.back() == '/'){
                    s.pop_back();
                    while(s.size()>0 && s.back() !='/'){
                        s.pop_back();
                    }
                }
            }
            else if(dot == 1){
                s.pop_back();
            }
        }
        while(s.back() == '/'&& s.size() > 1){
            s.pop_back();
        }
        
        string s1="";
        for(int j=0; j<s.size(); j++){
            s1 += s[j];
        }
        return s1;
    }
};