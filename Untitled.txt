There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
class Solution {
public:
double findMedianSortedArrays(int A[], int m, int B[], int n) {
    if(m==0 && n==0) return 0.0;
    if(m==0){
        return n%2 == 0? (B[n/2-1]+B[n/2])/2.0:B[n/2];
    }
    if(m>n){
        return findMedianSortedArrays(B,n,A,m);
    }
    if(A[m-1] <= B[0]){
        if((m+n)%2==0){
            return (m==n) ? (A[m-1]+B[0])/2.0 : (B[(m+n-1)/2-m]+B[(m+n-1)/2-m+1])/2.0;
        }
        else{
            return B[(m+n-1)/2-m];
        }
    }
    else if(A[0] >=B[n-1]){
        if((m+n)%2==0){
            return (m==n) ? (A[0]+B[n-1])/2.0 : (B[(m+n-1)/2]+B[(m+n-1)/2+1])/2.0;
        }
        else{
            return B[(m+n-1)/2];
        }
    }
    
    int a1=0;
    int a2=m-1;
    int flag = (m+n-1)/2;
    int mid1=(a1+a2)/2;
    int mid2=flag-mid1;
    while(a1<a2){
        if(A[mid1] == B[mid2]){
            break;
        }
        else if(A[mid1] > B[mid2]){
            a2=mid1-1;
        }
        else{
            a1=mid1+1;
        }
        mid1=(a1+a2)/2;
        mid2=flag-mid1;
    }
    
    if((m+n)%2==0){
        if(A[mid1] == B[mid2]){
            return (B[mid2]+A[mid1])/2.0;
        }
        else if(A[mid1] < B[mid2]){
            return  (mid1<m-1) ? min(A[mid1], A[mid1+1], B[mid2-1],B[mid2]) : min(A[mid1], B[mid2], B[mid2-1],B[mid2]);
        }
        else{
            return (mid1>=1) ? min(A[mid1], A[mid1-1], B[mid2],B[mid2+1]) : min(A[mid1],B[mid2], B[mid2],B[mid2+1]);
         }
    }
    else{
        if(A[mid1] <= B[mid2]){
            return min2(A[mid1], B[mid2], B[mid2-1]);
        }
        else{
            return (mid1>=1) ? min2(A[mid1-1], B[mid2], B[mid2+1]) : B[mid2];
        }
    }
}

double min2(int i, int j, int k){
    int min = i;
    int max = i;
    min = min < j ? min :j;
    max = max > j ? max : j;
    min = min < k ? min :k;
    max = max > k ? max : k;
    return (i+j+k)-min-max;
}
double min(int i, int j, int k, int l){
    int min = i;
    int max = i;
    min = min < j ? min :j;
    max = max > j ? max : j;
    min = min < k ? min :k;
    max = max > k ? max : k;
    min = min < l ? min :l;
    max = max > l ? max : l;
    
    return ((i+j+k+l)-(min+max))/2.0;
}

};