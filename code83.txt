Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.
Note: m and n will be at most 100.

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &grid) {
        int m = grid.size();
        if(m==0) return 0;
        int n = grid[0].size();
        if(n==0) return 0;
        if(grid[0][0] ==1  || grid[m-1][n-1] == 1) return 0;
        vector<vector<int> > v(m, vector<int>(n,0));
        v[m-1][n-1] = 1;
        if(v[m-1][n-1] == 0) return 0;
        for(int i=m-2; i>=0; i--){
            v[i][n-1] = grid[i][n-1] == 1 ? 0 : v[i+1][n-1];
        }
        for(int i=n-2; i>=0; i--){
            v[m-1][i] = grid[m-1][i] == 1 ? 0 : v[m-1][i+1];
        }
        
        for(int i=m-2; i>=0; i--){
            for(int j=n-2; j>=0; j--){
                v[i][j] = grid[i][j] == 1 ? 0 : v[i+1][j] + v[i][j+1];
            }
        }
        return v[0][0];
    }
};