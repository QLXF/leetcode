Given a binary tree, find the maximum path sum.
The path may start and end at any node in the tree.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode *root) {
        if(!root) return 0;
        if(!root->left && !root->right) return root->val;
        int max = root->val;
        maxPathSumHelper(root, max);
        return max;
    }
    int maxPathSumHelper(TreeNode *root, int& max){
        max = max > root->val ? max : root->val;
        if(!root->left&& !root->right){
            return root->val > 0 ? root->val : 0;
        }
        
        int left =0;
        int right = 0;
        int result = root->val;
        if(root->left){
            left = maxPathSumHelper(root->left,max);
        }
        if(root->right){
            right = maxPathSumHelper(root->right,max);
        }
        max = max > result+left+right  ? max : result+left+right;
        result = result + (left > right? left : right);
        return result > 0? result : 0;
    }
};