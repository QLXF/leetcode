Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:
	1.	Only one letter can be changed at a time
	2.	Each intermediate word must exist in the dictionary
For example,
Given: start = "hit" end = "cog" dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog", return its length 5.

class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        if(start.compare(end) == 0) return 2;
        if(isValidTrans(start, end)) return 2;
        
        vector<string> vstart;
        set<string> visited;
        vstart.push_back(start);
        visited.insert(start);
        
        int level = 0;
        while(vstart.size()>0){
            level++;
            vector<string> v;
            for(int i=0; i<vstart.size(); i++){
                int len = vstart[i].length();
                for(int j=0; j<len; j++){
                    string s1 = vstart[i];
                    for(char c='a'; c<='z';c++){
                        if(s1[j] == c){
                            continue;
                        }
                        s1[j]=c;
                        if(dict.find(s1) != dict.end()){
                            if(isValidTrans(s1, end)){
                                return level+2;
                            }
                            else{
                                if(visited.find(s1) == visited.end()){
                                    v.push_back(s1);
                                    visited.insert(s1);
                                }
                            }
                        }
                    }
                }
            }
            
            vstart.clear();
            vstart.insert(vstart.begin(), v.begin(), v.end());
            v.clear();
        }
        
        return 0;
    }
    
    bool isValidTrans(string s1, string s2){
        if(s1.length() != s2.length()) return false;
        int diff =0;
        for(int i=0; i<s1.length(); i++){
            if(s1[i] != s2[i]){
                diff++;
            }
        }
        return diff == 1? true:false;
    }
};