Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following is not:
    1
   / \
  2   2
   \   \
   3    3

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if(!root) return true;
        if(!root->left && !root->right) return true;
        
        vector<pair<TreeNode*, int> > v;
        v.push_back(make_pair(root,0));
        int level = 0;
        while(v.size()>0){
            level++;
            vector<pair<TreeNode*, int> > v1;
            for(int i=0; i<v.size(); i++){
                if(v[i].first->left){
                    v1.push_back(make_pair(v[i].first->left, 2*v[i].second));
                }
                
                if(v[i].first->right){
                    v1.push_back(make_pair(v[i].first->right, 2*v[i].second+1));
                }
            }
            if(v1.size() == 0) return true;
            if(v1.size()%2 != 0) return false;
            int f1 = 0;
            int f2 = v1.size()-1;
            while(f1<f2){
                if(v1[f1].first->val != v1[f2].first->val || (v1[f1].second+v1[f2].second) != (pow(2,level)-1))
                {
                    return false;
                }
                f1++;
                f2--;
            }
            v.clear();
            v.insert(v.begin(), v1.begin(), v1.end());
            v1.clear();
        }
    }
};