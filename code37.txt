Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
        if(!root) return false;
        if(!root->left && !root->right){
            return root->val == sum;
        }
        vector<TreeNode*> v;
        set<TreeNode*> s;
        v.push_back(root);
        s.insert(root);
        int leftover = sum-root->val;
        while(v.size()>0){
            TreeNode* n=v.back();
            if(n->left && s.find(n->left) == s.end()){
                v.push_back(n->left);
                s.insert(n->left);
                leftover -= n->left->val;
            }
            else if(n->right && s.find(n->right) == s.end()){
                v.push_back(n->right);
                s.insert(n->right);
                leftover -= n->right->val;               
            }
            else if(!n->left && !n->right){
                if(leftover == 0){
                    return true;
                }
                leftover += n->val;
                v.pop_back();
            }
            else{
                leftover += n->val;
                v.pop_back();
            }
        }
        return false;
    }
};

//recursive solution
    bool hasPathSum(TreeNode *root, int sum) {
        if(!root){
           return false;   
        } 
        if(!root->left && !root->right){
            return root->val == sum;
        }
        
        return hasPathSum(root->left, sum-root->val) || hasPathSum(root->right, sum-root->val);
    }