Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.
For example, given s = "aab",â€¨Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

class Solution {
public:
    int minCut(string s) {
        int len = s.length();
        if(len <= 1) return 0;
        
        vector<vector<bool> > vv(len, vector<bool>(len, false));
        for(int i=0; i<len; i++){
            vv[i][i] = true;
        }
        for(int i=0; i<len-1; i++){
            if(s[i] == s[i+1]){
                vv[i][i+1]=true;
            }
        }
        for(int i=3; i<=len; i++){
            for(int j=0; j<len-2; j++){
                if(s[j]==s[j+i-1] && vv[j+1][j+i-2]){
                    vv[j][j+i-1] = true;
                }
            }
        }
        
        vector<int> m(len, 0);
        m[0] = 0;
        for(int i=1; i<len; i++){
            int min=i;
            if(vv[0][i]){
                m[i] =0;
                continue;
            }
            for(int j=1; j<=i; j++){
                if(vv[j][i]){
                    min = min < (m[j-1]+1) ? min :(m[j-1]+1);
                }
            }
            m[i] = min;
        }
        return m[len-1];
    }
};