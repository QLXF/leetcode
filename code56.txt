Reverse a linked list from position m to n. Do it in-place and in one-pass.
For example: Given 1->2->3->4->5->NULL, m = 2 and n = 4,
return 1->4->3->2->5->NULL.
Note: Given m, n satisfy the following condition: 1 ≤ m ≤ n ≤ length of list.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        if(!head || m==n) return head;
        
        ListNode* mpre = NULL;
        ListNode *ln = head;
        int count = 1;
        while(count < m){
            if(count == m-1){
                mpre = ln;
            }
            ln = ln->next;
            count++;
        }
        
        ListNode *ln1 = ln->next;
        while(count < n){
            ListNode* ln2 = ln1->next;
            ln1->next = ln;
            ln = ln1;
            ln1= ln2;
            count++;
        }
        
        if(mpre){
            ListNode *tmp = mpre->next;
            mpre->next = ln;
            tmp->next = ln1;
        }
        else{
            head->next = ln1;
            head = ln;
        }
        
        return head;
    }
};