Follow up for N-Queens problem.
Now, instead outputting board configurations, return the total number of distinct solutions.

class Solution {
public:
    int totalNQueens(int n) {
        if(n==2 || n==3) return 0;
        if(n==1) return 1;
        vector<int> v;
        return helper(1,n,v);
    }
    
    int helper(int k, int n, vector<int> &v){
        vector<int> num = locations(k,n, v);
        if(k==n){
            return num.size();
        }
        int result = 0;
        for(int i=0; i<num.size(); i++){
            v.push_back(num[i]);
            result += helper(k+1, n, v);
            v.pop_back();
        }
        return result;
    }
    
    vector<int> locations(int k, int n, vector<int> &v){
        set<int> s;
        for(int i=0; i<n; i++) {
            s.insert(i);   
        }
        for(int i=0; i<v.size();i++){
            s.erase(v[i]);
            int i1=v[i]-(k-1-i);
            if(i1>=0) s.erase(i1);
            int i2=k-1-i+v[i];
            if(i2<n) s.erase(i2);
        }
        vector<int> v1;
        for(set<int>::iterator it = s.begin(); it!=s.end(); it++){
            v1.push_back(*it);
        }
        return v1;
    }
};